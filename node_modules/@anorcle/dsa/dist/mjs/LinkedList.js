import InvalidOperationError from './errors/InvalidOperationError.js';
class LinkedListElement {
    $VALUE;
    $NEXT;
    $PREV;
    constructor(value) {
        this.$VALUE = value;
        this.$NEXT = null;
        this.$PREV = null;
    }
    get next() {
        if (this.$NEXT == null) {
            throw new InvalidOperationError('LinkedList Error: Accessing Next Element is Null');
        }
        return this.$NEXT;
    }
    set next(element) {
        this.$NEXT = element;
    }
    get hasNext() {
        return this.$NEXT != null;
    }
    get prev() {
        if (this.$PREV == null) {
            throw new InvalidOperationError('LinkedList Error: Accessing Previous Element is Null');
        }
        return this.$PREV;
    }
    set prev(element) {
        this.$PREV = element;
    }
    get hasPrev() {
        return this.$PREV != null;
    }
    get value() {
        return this.$VALUE;
    }
    set value(value) {
        this.$VALUE = value;
    }
}
class LinkedList {
    LINKEDLIST_SIZE;
    LAST_ELEMENT;
    FIRST_ELEMENT;
    constructor(initialArray = []) {
        this.LINKEDLIST_SIZE = 0;
        this.LAST_ELEMENT = null;
        this.FIRST_ELEMENT = null;
        initialArray.forEach((value) => this.pushBack(value));
    }
    initializeWith(element) {
        this.FIRST_ELEMENT = element;
        this.LAST_ELEMENT = element;
        this.LINKEDLIST_SIZE = 1;
    }
    get size() {
        return this.LINKEDLIST_SIZE;
    }
    get empty() {
        return this.size == 0;
    }
    get frontElement() {
        if (this.FIRST_ELEMENT === null) {
            throw new InvalidOperationError('LinkedList Error: Accessing First Element, which is null');
        }
        return this.FIRST_ELEMENT;
    }
    get backElement() {
        if (this.LAST_ELEMENT === null) {
            throw new InvalidOperationError('LinkedList Error: Accessing Last Element, which is null');
        }
        return this.LAST_ELEMENT;
    }
    get front() {
        return this.frontElement.value;
    }
    get back() {
        return this.backElement.value;
    }
    pushBack(value) {
        const last = new LinkedListElement(value);
        if (this.size === 0 || this.LAST_ELEMENT === null || this.FIRST_ELEMENT === null) {
            this.initializeWith(last);
            return last;
        }
        const secondLast = this.LAST_ELEMENT;
        this.LAST_ELEMENT = last;
        secondLast.next = last;
        last.prev = secondLast;
        this.LINKEDLIST_SIZE++;
        return last;
    }
    pushFront(value) {
        const first = new LinkedListElement(value);
        if (this.size === 0 || this.LAST_ELEMENT === null || this.FIRST_ELEMENT === null) {
            this.initializeWith(first);
            return first;
        }
        const second = this.FIRST_ELEMENT;
        this.FIRST_ELEMENT = first;
        second.prev = first;
        first.next = second;
        this.LINKEDLIST_SIZE++;
        return first;
    }
    insertBefore(target, value) {
        if (target == this.FIRST_ELEMENT) {
            return this.pushFront(value);
        }
        const element = new LinkedListElement(value);
        const prev = target.prev;
        prev.next = element;
        element.next = target;
        target.prev = element;
        element.prev = prev;
        return element;
    }
    insertAfter(target, value) {
        if (target == this.LAST_ELEMENT) {
            return this.pushBack(value);
        }
        const element = new LinkedListElement(value);
        const next = target.next;
        target.next = element;
        element.next = next;
        next.prev = element;
        element.prev = target;
        return element;
    }
    popBack() {
        if (this.LAST_ELEMENT === null) {
            throw new InvalidOperationError('LinkedList Error: Pop Back Null Element');
        }
        const target = this.LAST_ELEMENT;
        if (this.size === 1) {
            this.LAST_ELEMENT = null;
            this.FIRST_ELEMENT = null;
        }
        else {
            this.LAST_ELEMENT = target.prev;
            // remove linkage for garbage collection
            this.LAST_ELEMENT.next = null;
            target.prev = null;
        }
        this.LINKEDLIST_SIZE--;
        return target.value;
    }
    popFront() {
        if (this.FIRST_ELEMENT === null) {
            throw new InvalidOperationError('LinkedList Error: Pop Front Null Element');
        }
        const target = this.FIRST_ELEMENT;
        if (this.size == 1) {
            this.LAST_ELEMENT = null;
            this.FIRST_ELEMENT = null;
        }
        else {
            this.FIRST_ELEMENT = target.next;
            // remove linkage for garbage collection
            this.FIRST_ELEMENT.prev = null;
            target.next = null;
        }
        this.LINKEDLIST_SIZE--;
        return target.value;
    }
    delete(target) {
        const prev = target.hasPrev ? target.prev : null;
        const next = target.hasNext ? target.next : null;
        if (prev && next) {
            // A <-> T <-> B
            prev.next = next; // A -> B
            next.prev = prev; // B -> A
        }
        else if (next) {
            // NULL <-> T <-> B
            this.FIRST_ELEMENT = next; // B
            next.prev = null;
        }
        else if (prev) {
            // A <-> T <-> NULL
            this.LAST_ELEMENT = prev; // A
            prev.next = null;
        }
        else {
            // NULL <-> T <-> NULL
            this.FIRST_ELEMENT = null;
            this.LAST_ELEMENT = null;
        }
        this.LINKEDLIST_SIZE--;
        // Dereference for garbage collection
        target.next = null;
        target.prev = null;
    }
    toArray() {
        const result = [];
        let itr = this.FIRST_ELEMENT;
        if (itr)
            result.push(itr.value);
        while (itr?.hasNext) {
            itr = itr.next;
            result.push(itr.value);
        }
        return result;
    }
}
export default LinkedList;
