declare class LinkedListElement<T> {
    private $VALUE;
    private $NEXT;
    private $PREV;
    constructor(value: T);
    get next(): LinkedListElement<T>;
    set next(element: LinkedListElement<T> | null);
    get hasNext(): boolean;
    get prev(): LinkedListElement<T>;
    set prev(element: LinkedListElement<T> | null);
    get hasPrev(): boolean;
    get value(): T;
    set value(value: T);
}
declare class LinkedList<T> {
    private LINKEDLIST_SIZE;
    private LAST_ELEMENT;
    private FIRST_ELEMENT;
    constructor(initialArray?: T[]);
    private initializeWith;
    get size(): number;
    get empty(): boolean;
    get frontElement(): LinkedListElement<T>;
    get backElement(): LinkedListElement<T>;
    get front(): T;
    get back(): T;
    pushBack(value: T): LinkedListElement<T>;
    pushFront(value: T): LinkedListElement<T>;
    insertBefore(target: LinkedListElement<T>, value: T): LinkedListElement<T>;
    insertAfter(target: LinkedListElement<T>, value: T): LinkedListElement<T>;
    popBack(): T;
    popFront(): T;
    delete(target: LinkedListElement<T>): void;
    toArray(): T[];
}
export default LinkedList;
