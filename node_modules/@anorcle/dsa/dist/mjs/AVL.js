import { BST } from './index.js';
import InvalidOperationError from './errors/InvalidOperationError.js';
class AVL extends BST {
    constructor(compare) {
        super(compare);
    }
    rotateRight(node) {
        const parent = node.parent;
        const left = node.left;
        const lRight = node.left?.right;
        if (left) {
            left.parent = parent;
            left.right = node;
            node.parent = left;
            node.left = lRight ? lRight : null;
            if (lRight)
                lRight.parent = node;
            if (parent) {
                if (parent.right == node)
                    parent.right = left;
                else
                    parent.left = left;
            }
            this.adjustHeight(node);
            if (parent == null) {
                this.$ROOT = left;
            }
        }
    }
    rotateLeft(node) {
        const parent = node.parent;
        const right = node.right;
        const rLeft = node.right?.left;
        if (right) {
            right.parent = parent;
            right.left = node;
            node.parent = right;
            node.right = rLeft ? rLeft : null;
            if (rLeft)
                rLeft.parent = node;
            if (parent) {
                if (parent.right == node)
                    parent.right = right;
                else
                    parent.left = right;
            }
            this.adjustHeight(node);
            if (parent == null) {
                this.$ROOT = right;
            }
        }
    }
    rebalanceRight(node) {
        const left = node.left;
        if (left == null)
            throw new Error('AVL Error: Unexpected Error!');
        const lRHeight = left.right?.height || 0;
        const lLHeight = left.left?.height || 0;
        if (lRHeight > lLHeight) {
            this.rotateLeft(left);
        }
        this.rotateRight(node);
    }
    rebalanceLeft(node) {
        const right = node.right;
        if (right == null)
            throw new Error('AVL Error: Unexpected Error!');
        const rLHeight = right.left?.height || 0;
        const rRHeight = right.right?.height || 0;
        if (rLHeight > rRHeight) {
            this.rotateRight(right);
        }
        this.rotateLeft(node);
    }
    rebalance(node) {
        const leftHeight = node.left?.height || 0;
        const rightHeight = node.right?.height || 0;
        if (leftHeight > rightHeight + 1) {
            this.rebalanceRight(node);
        }
        else if (rightHeight > leftHeight + 1) {
            this.rebalanceLeft(node);
        }
        if (node.parent)
            this.rebalance(node.parent);
    }
    insert(data) {
        if (this.findNode(data)) {
            throw new InvalidOperationError('AVL Error: Duplicate Keys not Allowed!');
        }
        const node = super.insert(data);
        this.rebalance(node);
        return node;
    }
    delete(data) {
        const ref = this.findNode(data);
        if (ref == null || this.compare(ref.data, data) != 0) {
            // tree empty or element not found
            return;
        }
        this.deleteElement(ref);
        const parentOfReplacingElement = this.insertionPoint(data);
        if (parentOfReplacingElement)
            this.rebalance(parentOfReplacingElement);
    }
}
export default AVL;
